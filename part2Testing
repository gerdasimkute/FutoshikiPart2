package futoshikipart2;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import futoshikipart2.Futoshiki;

/**
 * Tests for futoshiki part 2
 *
 * @author 184752
 */
public class Futoshiki2Test {

    Futoshiki filledPuzzle;

    static final String emptyPuzzleString
            = "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                   \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                   \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                   \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                   \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n";

    static final String filledPuzzleString
            = "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                   \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | |>| |\n"
            + "--- --- --- --- ---\n"
            + " V                 \n"
            + "--- --- --- --- ---\n"
            + "| | | | | | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                 ^ \n"
            + "--- --- --- --- ---\n"
            + "| | | |<| | | | | |\n"
            + "--- --- --- --- ---\n"
            + "                 ^ \n"
            + "--- --- --- --- ---\n"
            + "|4|<| | | |<| | | |\n"
            + "--- --- --- --- ---\n";

    @Before
    public void setUp() {
        //sets up a Futoshiki puzzle
        // Note that we implicitly test the constraint setting here
        filledPuzzle = new Futoshiki();
        filledPuzzle.setColumnConstraint(0, 1, ">");
        filledPuzzle.setRowConstraint(4, 0, "<");
        filledPuzzle.setRowConstraint(4, 2, "<");
        filledPuzzle.setColumnConstraint(4, 3, "<");
        filledPuzzle.setColumnConstraint(4, 2, "<");
        filledPuzzle.setRowConstraint(3, 1, "<");
        filledPuzzle.setRowConstraint(1, 3, ">");
        filledPuzzle.setSquare(4, 0, 4);
    }

    @After
    public void tearDown() {
    }

    @Test
    public void settingTest() {
        Futoshiki fs = new Futoshiki(6);
        fs.setSquare(0, 0, 1);
        assertEquals(1, fs.getSquare(0, 0));
        fs.setSquare(0, 0, -1);
        assertEquals(1, fs.getSquare(0, 0));
        // Note we check different coordinates
        fs.setSquare(5, 5, 4);
        assertEquals(4, fs.getSquare(5, 5));
        fs.setSquare(5, 5, 7);
        assertEquals(4, fs.getSquare(5, 5));
        fs.setSquare(6, 6, 3);
        assertEquals(0, fs.getSquare(6, 6));

    }

    @Test
    public void displayStringSmallTest() {
        Futoshiki fs = new Futoshiki(1);
        assertEquals("---\n| |\n---\n", fs.displayString());
    }

    @Test
    public void displayStringTest() {

        Futoshiki fs = new Futoshiki();
        assertEquals(emptyPuzzleString, fs.displayString());

    }

    @Test
    public void testRandomPuzzle() {
        // This is a one off test.  One might argue that this is a random 
        // method, so should be called multiple times.  However, given the
        // fill occupancy used, there are multiple collisions with very
        // high probability
        Futoshiki fs = new Futoshiki(5);
        fs.fillPuzzle(20, 20, 20);

        String s = fs.displayString();
        int[] counter = new int[3];
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '1':
                case '2':
                case '3':
                case '4':
                case '5': {
                    counter[0]++;
                    break;
                }
                case '<':
                case '>': {
                    counter[1]++;
                    break;
                }
                case 'v':
                case '^': {
                    counter[2]++;
                    break;
                }
            }
        }
        for (int count : counter) {
            assertEquals(20, count);
        }
    }

    @Test
    public void isLegalTest() {

        // 0 , 0 , 0
        // 0 , 0 , 0 
        // 1 < 2 , 0
        Futoshiki fs = new Futoshiki();
        fs.setRowConstraint(2, 2, "<");
        fs.setSquare(2, 0, 1);
        fs.setSquare(2, 1, 2);
        assertTrue(fs.isLegal());
    }

    @Test
    public void isLegalTest2() {

        // 2 > 1 , 0
        // 0 , 0 , 0 
        // 0 , 0 , 0
        Futoshiki fs = new Futoshiki();
        fs.setRowConstraint(0, 1, ">");
        fs.setSquare(0, 0, 2);
        fs.setSquare(0, 1, 1);
        assertTrue(fs.isLegal());
    }

    @Test
    public void isLegalTest3() {

        // 2 , 0 , 0
        // ^
        // 1 , 0 , 0 
        // 0 , 0 , 0
        Futoshiki fs = new Futoshiki();
        fs.setColumnConstraint(0, 0, "^");
        fs.setSquare(0, 0, 2);
        fs.setSquare(1, 0, 1);
        assertFalse(fs.isLegal());
    }

    @Test
    public void getExtremeValTest() {

        // 0 < 1 , 0
        // 0 , 0 , 0 
        // 0 , 0 , 0
        Futoshiki fs = new Futoshiki();
        fs.setRowConstraint(0, 1, "<");
        fs.setSquare(0, 0, 0);
        fs.setSquare(0, 1, 1);
        assertEquals("Extreme value in row: 0", fs.getExtremeValues());
    }
    
    @Test
    public void duplicateElementsTest() {
        // 1 , 1 , 2
        // 0 , 0 , 0 
        // 0 , 0 , 0
        Futoshiki fs = new Futoshiki(3);
        fs.setSquare(0, 0, 1);
        fs.setSquare(0, 1, 1);
        fs.setSquare(0, 2, 2);
        assertEquals("Duplicate Element in row: 0", fs.getDuplicateElements());
    }
    
    @Test
    public void badConstraintTest() {
        // 1 > 2 , 0
        // 0 , 0 , 0 
        // 0 , 0 , 0
        Futoshiki fs = new Futoshiki();
        fs.setRowConstraint(0, 1, ">");
        fs.setSquare(0, 0, 1);
        fs.setSquare(0, 1, 2);
        assertEquals("Bad Constraint in column: ", fs.getBadConstraints());
    }
    

}
